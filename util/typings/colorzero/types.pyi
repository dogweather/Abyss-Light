"""
This type stub file was generated by pyright.
"""

from collections import namedtuple

"Define the tuples used to represent various color systems."
class RGB(tuple):
    "Named tuple representing red, green, and blue."
    __slots__ = ...
    _fields = ...
    def __new__(cls, r, g, b): # -> Self:
        ...
    
    def __repr__(self): # -> str:
        "Return a nicely formatted representation string"
        ...
    
    def __getnewargs__(self): # -> tuple[Any, ...]:
        "Return self as a plain tuple.  Used by copy and pickle."
        ...
    
    @property
    def r(self): # -> Red:
        "Return the red value as a :class:`Red` instance"
        ...
    
    @property
    def red(self): # -> Red:
        "Return the red value as a :class:`Red` instance"
        ...
    
    @property
    def g(self): # -> Green:
        "Return the green value as a :class:`Green` instance"
        ...
    
    @property
    def green(self): # -> Green:
        "Return the green value as a :class:`Green` instance"
        ...
    
    @property
    def b(self): # -> Blue:
        "Return the blue value as a :class:`Blue` instance"
        ...
    
    @property
    def blue(self): # -> Blue:
        "Return the blue value as a :class:`Blue` instance"
        ...
    


class HLS(tuple):
    "Named tuple representing hue, lightness, and saturation."
    __slots__ = ...
    _fields = ...
    def __new__(cls, h, l, s): # -> Self:
        ...
    
    def __repr__(self): # -> str:
        "Return a nicely formatted representation string"
        ...
    
    def __getnewargs__(self): # -> tuple[Any, ...]:
        "Return self as a plain tuple.  Used by copy and pickle."
        ...
    
    @property
    def h(self): # -> Hue:
        "Return the hue value as a :class:`Hue` instance"
        ...
    
    @property
    def hue(self): # -> Hue:
        "Return the hue value as a :class:`Hue` instance"
        ...
    
    @property
    def l(self): # -> Lightness:
        "Return the lightness value as a :class:`Lightness` instance"
        ...
    
    @property
    def lightness(self): # -> Lightness:
        "Return the lightness value as a :class:`Lightness` instance"
        ...
    
    @property
    def s(self): # -> Saturation:
        "Return the saturation value as a :class:`Saturation` instance"
        ...
    
    @property
    def saturation(self): # -> Saturation:
        "Return the saturation value as a :class:`Saturation` instance"
        ...
    


class HSV(tuple):
    'Named tuple representing hue, saturation, and value ("brightness").'
    __slots__ = ...
    _fields = ...
    def __new__(cls, h, s, v): # -> Self:
        ...
    
    def __repr__(self): # -> str:
        "Return a nicely formatted representation string"
        ...
    
    def __getnewargs__(self): # -> tuple[Any, ...]:
        "Return self as a plain tuple.  Used by copy and pickle."
        ...
    
    @property
    def h(self): # -> Hue:
        "Return the hue value as a :class:`Hue` instance"
        ...
    
    @property
    def hue(self): # -> Hue:
        "Return the hue value as a :class:`Hue` instance"
        ...
    
    @property
    def s(self): # -> Saturation:
        "Return the saturation value as a :class:`Saturation` instance"
        ...
    
    @property
    def saturation(self): # -> Saturation:
        "Return the saturation value as a :class:`Saturation` instance"
        ...
    
    @property
    def v(self):
        "Return the brightness value"
        ...
    
    @property
    def value(self):
        "Return the brightness value"
        ...
    


class YUV(tuple):
    "Named tuple representing luma and two chroma offsets"
    __slots__ = ...
    _fields = ...
    def __new__(cls, y, u, v): # -> Self:
        ...
    
    def __repr__(self): # -> str:
        "Return a nicely formatted representation string"
        ...
    
    def __getnewargs__(self): # -> tuple[Any, ...]:
        "Return self as a plain tuple.  Used by copy and pickle."
        ...
    
    @property
    def y(self): # -> Luma:
        "Return the luma value as a :class:`Luma` instance"
        ...
    
    @property
    def luma(self): # -> Luma:
        "Return the luma value as a :class:`Luma` instance"
        ...
    
    @property
    def u(self):
        "Return the first chroma offset"
        ...
    
    @property
    def v(self):
        "Return the second chroma offset"
        ...
    


class CMY(namedtuple('CMY', ('c', 'm', 'y'))):
    "Named tuple representing cyan, magenta, and yellow."
    @property
    def cyan(self):
        ...
    
    @property
    def magenta(self):
        ...
    
    @property
    def yellow(self):
        ...
    


class CMYK(namedtuple('CMYK', ('c', 'm', 'y', 'k'))):
    "Named tuple representing cyan, magenta, yellow, and black."
    @property
    def cyan(self):
        ...
    
    @property
    def magenta(self):
        ...
    
    @property
    def yellow(self):
        ...
    
    @property
    def black(self):
        ...
    


YIQ = ...
XYZ = ...
Luv = ...
Lab = ...
