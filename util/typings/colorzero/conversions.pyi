"""
This type stub file was generated by pyright.
"""

from collections import namedtuple

"""
Defines all conversion functions used by colorzero to convert between the
various color systems implemented. References used in the development of these
routines are as follows:

* `Charles Poynton's Color FAQ`_
* `Bruce Lindbloom's Color Equations`_
* `RGB color space`_ article from Wikipedia
* `SRGB`_ article from Wikipedia
* `YUV`_ article from Wikipedia
* `YIQ`_ article from Wikipedia
* `HSL and HSV`_ article from Wikipedia
* `CIE 1931 color space`_ article from Wikipedia

.. _RGB color space: https://en.wikipedia.org/wiki/RGB_color_space
.. _SRGB: https://en.wikipedia.org/wiki/SRGB
.. _YUV: https://en.wikipedia.org/wiki/YUV
.. _YIQ: https://en.wikipedia.org/wiki/YIQ
.. _HSL and HSV: https://en.wikipedia.org/wiki/HSL_and_HSV
.. _CIE 1931 color space: https://en.wikipedia.org/wiki/CIE_1931_color_space
.. _Charles Poynton's Color FAQ: http://www.poynton.com/notes/colour_and_gamma/ColorFAQ.html
.. _Bruce Lindbloom's Color Equations: https://www.brucelindbloom.com/
"""
def clamp_float(v): # -> float:
    "Clamp *v* to the range 0.0 to 1.0 inclusive"
    ...

def clamp_bytes(v): # -> int:
    "Clamp *v* to the range 0 to 255 inclusive"
    ...

def to_srgb(c):
    "Convert a linear RGB value (0..1) to the sRGB color space"
    ...

def from_srgb(c):
    "Convert an RGB value from the sRGB color space to linear RGB"
    ...

def xyz_to_uv(x, y, z): # -> tuple[Literal[0], Literal[0]] | tuple[Any, Any]:
    "Calculate the U, V values from an XYZ color"
    ...

def matrix_mult(m, n): # -> Generator[int, None, None]:
    "Generator function that multiplies matrices *m* and *n*"
    ...

class YUVCoefficients(namedtuple('YUVCoefficients', ('Wr', 'Wg', 'Wb', 'Umax', 'Vmax', 'U', 'V', 'Rv', 'Gu', 'Gv', 'Bu'))):
    "Represents coefficients for the BT.601 and BT.709 standards."
    def __new__(cls, Umax=..., Vmax=..., **kwargs): # -> Self:
        ...
    


BT601 = ...
BT709 = ...
SMPTE240M = ...
D50 = ...
D65 = ...
def rgb_to_yiq(r, g, b): # -> YIQ:
    "Convert a linear RGB color to YIQ"
    ...

def yiq_to_rgb(y, i, q): # -> RGB:
    "Convert a YIQ color to linear RGB"
    ...

def rgb_to_hls(r, g, b): # -> HLS:
    "Convert a linear RGB color to HLS"
    ...

def hls_to_rgb(h, l, s): # -> RGB:
    "Convert an HLS color to linear RGB"
    ...

def rgb_to_hsv(r, g, b): # -> HSV:
    "Convert a linear RGB color to HSV"
    ...

def hsv_to_rgb(h, s, v): # -> RGB:
    "Convert an HSV color to linear RGB"
    ...

def rgb_to_rgb_bytes(r, g, b): # -> RGB:
    "Convert a linear RGB color to RGB888"
    ...

def rgb_bytes_to_rgb(r, g, b): # -> RGB:
    "Convert an RGB888 color to linear RGB"
    ...

def rgb_bytes_to_html(r, g, b): # -> str:
    "Convert RGB888 to the HTML representation"
    ...

def rgb_bytes_to_rgb24(r, g, b):
    "Convert RGB888 to RGB24"
    ...

def rgb24_to_rgb_bytes(n): # -> RGB:
    "Convert RGB24 to RGB888"
    ...

def html_to_rgb_bytes(html): # -> RGB:
    "Convert the HTML color representation to RGB888"
    ...

def name_to_html(name): # -> str:
    "Convert a named color to the HTML representation"
    ...

def rgb_to_rgb565(r, g, b): # -> int:
    "Convert linear RGB to RGB565"
    ...

def rgb565_to_rgb(rgb565): # -> RGB:
    "Convert RGB565 to linear RGB"
    ...

def rgb_to_yuv(r, g, b, std=...): # -> YUV:
    """
    Convert linear RGB to Y'CbCr using the specified coefficients (the default
    coefficients are from BT.601)
    """
    ...

def yuv_to_rgb(y, u, v, std=...): # -> RGB:
    """
    Convert Y'CbCr to linear RGB using the specified coefficients (the default
    coefficients are from BT.601)
    """
    ...

def rgb_bytes_to_yuv_bytes(r, g, b): # -> YUV:
    "Convert RGB888 to YUV444 bytes using studio swing from BT.601"
    ...

def yuv_bytes_to_rgb_bytes(y, u, v): # -> RGB:
    "Convert YUV444 bytes to RGB888 using studio swing from BT.601"
    ...

def rgb_to_cmy(r, g, b): # -> CMY:
    "Convert linear RGB to CMY using the subtractive method"
    ...

def cmy_to_rgb(c, m, y): # -> RGB:
    "Convert CMY to linear RGB using the subtractive method"
    ...

def cmy_to_cmyk(c, m, y): # -> CMYK:
    "Calculate the black component of CMY to convert to CMYK"
    ...

def cmyk_to_cmy(c, m, y, k): # -> CMY:
    "Remove the black component from CMYK to yield CMY"
    ...

def rgb_to_xyz(r, g, b): # -> XYZ:
    """
    Convert linear RGB to CIE XYZ representation. RGB is assumed to be sRGB and
    conversion uses D65 as reference white.
    """
    ...

def xyz_to_rgb(x, y, z): # -> RGB:
    """
    Convert CIE XYZ representation to linear RGB. sRGB is used as the output
    color space, and D65 as reference white.
    """
    ...

def luv_to_xyz(l, u, v, white=...): # -> XYZ:
    "Convert CIE L*u*v* to CIE XYZ representation"
    ...

def xyz_to_luv(x, y, z, white=...): # -> Luv:
    "Convert CIE XYZ to CIE L*u*v* representation"
    ...

def lab_to_xyz(l, a, b, white=...): # -> XYZ:
    "Convert CIE L*a*b* to CIE XYZ representation"
    ...

def xyz_to_lab(x, y, z, white=...): # -> Lab:
    "Convert CIE XYZ to CIE L*a*b* representation"
    ...

